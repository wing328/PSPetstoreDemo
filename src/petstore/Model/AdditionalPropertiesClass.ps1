#
# OpenAPI Petstore
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: "" \
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER MapProperty
No description available.
.PARAMETER MapOfMapProperty
No description available.
.OUTPUTS

AdditionalPropertiesClass<PSCustomObject>
#>

function Initialize-AdditionalPropertiesClass {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${MapProperty},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${MapOfMapProperty}
    )

    Process {
        'Creating PSCustomObject: petstore => AdditionalPropertiesClass' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "map_property" = ${MapProperty}
            "map_of_map_property" = ${MapOfMapProperty}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AdditionalPropertiesClass<PSCustomObject>

.DESCRIPTION

Convert from JSON to AdditionalPropertiesClass<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AdditionalPropertiesClass<PSCustomObject>
#>
function ConvertFrom-JsonToAdditionalPropertiesClass {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: petstore => AdditionalPropertiesClass' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $AdditionalPropertiesClassAdditionalProperties = @{}

        # check if Json contains properties not defined in AdditionalPropertiesClass
        $AllProperties = ("map_property", "map_of_map_property")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $AdditionalPropertiesClassAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "map_property"))) { #optional property not found
            $MapProperty = $null
        } else {
            $MapProperty = $JsonParameters.PSobject.Properties["map_property"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "map_of_map_property"))) { #optional property not found
            $MapOfMapProperty = $null
        } else {
            $MapOfMapProperty = $JsonParameters.PSobject.Properties["map_of_map_property"].value
        }

        $PSO = [PSCustomObject]@{
            "map_property" = ${MapProperty}
            "map_of_map_property" = ${MapOfMapProperty}
            "AdditionalProperties" = $AdditionalPropertiesClassAdditionalProperties
        }

        return $PSO
    }

}

