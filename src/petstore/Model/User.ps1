#
# OpenAPI Petstore
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: "" \
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Username
No description available.
.PARAMETER FirstName
No description available.
.PARAMETER LastName
No description available.
.PARAMETER Email
No description available.
.PARAMETER Password
No description available.
.PARAMETER Phone
No description available.
.PARAMETER UserStatus
User Status
.PARAMETER ArbitraryObject
test code generation for objects Value must be a map of strings to values. It cannot be the 'null' value.
.PARAMETER ArbitraryNullableObject
test code generation for nullable objects. Value must be a map of strings to values or the 'null' value.
.PARAMETER ArbitraryTypeValue
test code generation for any type Value can be any type - string, number, boolean, array or object.
.PARAMETER ArbitraryNullableTypeValue
test code generation for any type Value can be any type - string, number, boolean, array, object or the 'null' value.
.OUTPUTS

User<PSCustomObject>
#>

function Initialize-User {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Username},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FirstName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Email},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Password},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Phone},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${UserStatus},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ArbitraryObject},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ArbitraryNullableObject},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ArbitraryTypeValue},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ArbitraryNullableTypeValue}
    )

    Process {
        'Creating PSCustomObject: petstore => User' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "username" = ${Username}
            "firstName" = ${FirstName}
            "lastName" = ${LastName}
            "email" = ${Email}
            "password" = ${Password}
            "phone" = ${Phone}
            "userStatus" = ${UserStatus}
            "arbitraryObject" = ${ArbitraryObject}
            "arbitraryNullableObject" = ${ArbitraryNullableObject}
            "arbitraryTypeValue" = ${ArbitraryTypeValue}
            "arbitraryNullableTypeValue" = ${ArbitraryNullableTypeValue}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to User<PSCustomObject>

.DESCRIPTION

Convert from JSON to User<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

User<PSCustomObject>
#>
function ConvertFrom-JsonToUser {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: petstore => User' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $UserAdditionalProperties = @{}

        # check if Json contains properties not defined in User
        $AllProperties = ("id", "username", "firstName", "lastName", "email", "password", "phone", "userStatus", "arbitraryObject", "arbitraryNullableObject", "arbitraryTypeValue", "arbitraryNullableTypeValue")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $UserAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "username"))) { #optional property not found
            $Username = $null
        } else {
            $Username = $JsonParameters.PSobject.Properties["username"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "firstName"))) { #optional property not found
            $FirstName = $null
        } else {
            $FirstName = $JsonParameters.PSobject.Properties["firstName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastName"))) { #optional property not found
            $LastName = $null
        } else {
            $LastName = $JsonParameters.PSobject.Properties["lastName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "email"))) { #optional property not found
            $Email = $null
        } else {
            $Email = $JsonParameters.PSobject.Properties["email"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "password"))) { #optional property not found
            $Password = $null
        } else {
            $Password = $JsonParameters.PSobject.Properties["password"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "phone"))) { #optional property not found
            $Phone = $null
        } else {
            $Phone = $JsonParameters.PSobject.Properties["phone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userStatus"))) { #optional property not found
            $UserStatus = $null
        } else {
            $UserStatus = $JsonParameters.PSobject.Properties["userStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "arbitraryObject"))) { #optional property not found
            $ArbitraryObject = $null
        } else {
            $ArbitraryObject = $JsonParameters.PSobject.Properties["arbitraryObject"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "arbitraryNullableObject"))) { #optional property not found
            $ArbitraryNullableObject = $null
        } else {
            $ArbitraryNullableObject = $JsonParameters.PSobject.Properties["arbitraryNullableObject"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "arbitraryTypeValue"))) { #optional property not found
            $ArbitraryTypeValue = $null
        } else {
            $ArbitraryTypeValue = $JsonParameters.PSobject.Properties["arbitraryTypeValue"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "arbitraryNullableTypeValue"))) { #optional property not found
            $ArbitraryNullableTypeValue = $null
        } else {
            $ArbitraryNullableTypeValue = $JsonParameters.PSobject.Properties["arbitraryNullableTypeValue"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "username" = ${Username}
            "firstName" = ${FirstName}
            "lastName" = ${LastName}
            "email" = ${Email}
            "password" = ${Password}
            "phone" = ${Phone}
            "userStatus" = ${UserStatus}
            "arbitraryObject" = ${ArbitraryObject}
            "arbitraryNullableObject" = ${ArbitraryNullableObject}
            "arbitraryTypeValue" = ${ArbitraryTypeValue}
            "arbitraryNullableTypeValue" = ${ArbitraryNullableTypeValue}
            "AdditionalProperties" = $UserAdditionalProperties
        }

        return $PSO
    }

}

