#
# OpenAPI Petstore
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: "" \
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER JustSymbol
No description available.
.PARAMETER ArrayEnum
No description available.
.OUTPUTS

EnumArrays<PSCustomObject>
#>

function Initialize-EnumArrays {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet(">=", "$")]
        [String]
        ${JustSymbol},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("fish", "crab")]
        [String[]]
        ${ArrayEnum}
    )

    Process {
        'Creating PSCustomObject: petstore => EnumArrays' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "just_symbol" = ${JustSymbol}
            "array_enum" = ${ArrayEnum}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to EnumArrays<PSCustomObject>

.DESCRIPTION

Convert from JSON to EnumArrays<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

EnumArrays<PSCustomObject>
#>
function ConvertFrom-JsonToEnumArrays {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: petstore => EnumArrays' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $EnumArraysAdditionalProperties = @{}

        # check if Json contains properties not defined in EnumArrays
        $AllProperties = ("just_symbol", "array_enum")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $EnumArraysAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "just_symbol"))) { #optional property not found
            $JustSymbol = $null
        } else {
            $JustSymbol = $JsonParameters.PSobject.Properties["just_symbol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "array_enum"))) { #optional property not found
            $ArrayEnum = $null
        } else {
            $ArrayEnum = $JsonParameters.PSobject.Properties["array_enum"].value
        }

        $PSO = [PSCustomObject]@{
            "just_symbol" = ${JustSymbol}
            "array_enum" = ${ArrayEnum}
            "AdditionalProperties" = $EnumArraysAdditionalProperties
        }

        return $PSO
    }

}

