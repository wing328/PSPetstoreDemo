#
# OpenAPI Petstore
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: "" \
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER String
No description available.
.OUTPUTS

FooGetDefaultResponse<PSCustomObject>
#>

function Initialize-FooGetDefaultResponse {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${String}
    )

    Process {
        'Creating PSCustomObject: petstore => FooGetDefaultResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "string" = ${String}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FooGetDefaultResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to FooGetDefaultResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FooGetDefaultResponse<PSCustomObject>
#>
function ConvertFrom-JsonToFooGetDefaultResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: petstore => FooGetDefaultResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $FooGetDefaultResponseAdditionalProperties = @{}

        # check if Json contains properties not defined in FooGetDefaultResponse
        $AllProperties = ("string")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $FooGetDefaultResponseAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "string"))) { #optional property not found
            $String = $null
        } else {
            $String = $JsonParameters.PSobject.Properties["string"].value
        }

        $PSO = [PSCustomObject]@{
            "string" = ${String}
            "AdditionalProperties" = $FooGetDefaultResponseAdditionalProperties
        }

        return $PSO
    }

}

