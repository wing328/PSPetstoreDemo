#
# OpenAPI Petstore
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: "" \
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Prop1
No description available.
.PARAMETER Prop2
No description available.
.PARAMETER Prop3
No description available.
.PARAMETER BoolProp1
No description available.
.PARAMETER BoolProp2
No description available.
.PARAMETER IntProp1
No description available.
.PARAMETER IntProp2
No description available.
.OUTPUTS

ReadOnlyWithDefault<PSCustomObject>
#>

function Initialize-ReadOnlyWithDefault {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Prop1},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Prop2} = "defaultProp2",
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Prop3} = "defaultProp3",
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${BoolProp1} = $false,
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${BoolProp2} = $true,
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${IntProp1} = 100,
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${IntProp2} = 120
    )

    Process {
        'Creating PSCustomObject: petstore => ReadOnlyWithDefault' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "prop1" = ${Prop1}
            "prop2" = ${Prop2}
            "prop3" = ${Prop3}
            "boolProp1" = ${BoolProp1}
            "boolProp2" = ${BoolProp2}
            "intProp1" = ${IntProp1}
            "intProp2" = ${IntProp2}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ReadOnlyWithDefault<PSCustomObject>

.DESCRIPTION

Convert from JSON to ReadOnlyWithDefault<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ReadOnlyWithDefault<PSCustomObject>
#>
function ConvertFrom-JsonToReadOnlyWithDefault {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: petstore => ReadOnlyWithDefault' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $ReadOnlyWithDefaultAdditionalProperties = @{}

        # check if Json contains properties not defined in ReadOnlyWithDefault
        $AllProperties = ("prop1", "prop2", "prop3", "boolProp1", "boolProp2", "intProp1", "intProp2")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $ReadOnlyWithDefaultAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prop1"))) { #optional property not found
            $Prop1 = $null
        } else {
            $Prop1 = $JsonParameters.PSobject.Properties["prop1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prop2"))) { #optional property not found
            $Prop2 = $null
        } else {
            $Prop2 = $JsonParameters.PSobject.Properties["prop2"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prop3"))) { #optional property not found
            $Prop3 = $null
        } else {
            $Prop3 = $JsonParameters.PSobject.Properties["prop3"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "boolProp1"))) { #optional property not found
            $BoolProp1 = $null
        } else {
            $BoolProp1 = $JsonParameters.PSobject.Properties["boolProp1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "boolProp2"))) { #optional property not found
            $BoolProp2 = $null
        } else {
            $BoolProp2 = $JsonParameters.PSobject.Properties["boolProp2"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "intProp1"))) { #optional property not found
            $IntProp1 = $null
        } else {
            $IntProp1 = $JsonParameters.PSobject.Properties["intProp1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "intProp2"))) { #optional property not found
            $IntProp2 = $null
        } else {
            $IntProp2 = $JsonParameters.PSobject.Properties["intProp2"].value
        }

        $PSO = [PSCustomObject]@{
            "prop1" = ${Prop1}
            "prop2" = ${Prop2}
            "prop3" = ${Prop3}
            "boolProp1" = ${BoolProp1}
            "boolProp2" = ${BoolProp2}
            "intProp1" = ${IntProp1}
            "intProp2" = ${IntProp2}
            "AdditionalProperties" = $ReadOnlyWithDefaultAdditionalProperties
        }

        return $PSO
    }

}

